{
  "name": "ssq",
  "description": "Source Server Queries for Node.JS",
  "version": "0.0.1",
  "homepage": "http://github.com/gcommer/node-ssq",
  "licenses": [
    {
      "type": "BSD"
    }
  ],
  "main": "./lib/ssq.js",
  "author": {
    "name": "George Pittarelli",
    "email": "george@gpittarelli.com",
    "url": "gpittarelli.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/gcommer/node-ssq.git"
  },
  "engines": {
    "node": ">= 0.6.13"
  },
  "bugs": {
    "url": "http://github.com/gcommer/node-ssq/issues"
  },
  "dependencies": {
    "bufferpack": "~0.0.6"
  },
  "devDependencies": {
    "should": "~0.6.3",
    "mocha": "~1.2.0"
  },
  "scripts": {
    "test": ".\\node_modules\\.bin\\mocha ./tests --reporter spec"
  },
  "readme": "node-ssq\n========\n\nA Node.JS library for sending Source Server Queries (SSQ) to source engine\npowered game servers (TF2, L4D, etc.).\n\nI recommend glancing over the following Valve dev wiki page about SSQ:\n\nhttps://developer.valvesoftware.com/wiki/Server_queries\n\n## WARNING\nI created this library and shortly after didn't need it anymore. It\nshould work fine, but has not been aggresively tested.\n\n## Known issue\nSome long messages may be split into chunks or compressed.\nNeither of these modes are currently supported. If you see an error like:\n\n    SSQ response used unsupported split packet mode.\n\nthen you're out of luck. Currently I only get this message when requesting the rules list from some servers.\n\n## API\nThe API is very simple. All functions are passed a server string\n(dotted quad ipv4 address or domain name), a port number, and a callback\nfunction that takes an error as the first parameter and the returned data\nas the second parameter.\n\nAll the below examples assume this library is imported as `ssq`:\n\n    var ssq = require('node-ssq');\n\n### Ping\n\n    ssq.ping('1.23.45.67', 1337, function (err, data) {});\n\nPings the server. *This message has been deprecated by Valve, and doesn't serve\nmuch of a use...*\n\n### Server info\n\n    ssq.info('1.23.45.67', 1337, function (err, data) {});\n\nReturns a single object with a lot of data about the server.\n\n    { netver: 17,\n      servername: 'Reddit Unofficial Gaming Community - East Coast',\n      map: 'pl_upward',\n      gamedirectory: 'tf',\n      gamedescription: 'Team Fortress',\n      appid: 440,\n      numplayers: 23,\n      maxplayers: 24,\n      numbots: 0,\n      servertype: 'd',\n      os: 'l',\n      password: 0,\n      vacsecured: 1,\n      gameversion: '1.2.1.0',\n      EDF: 177,\n\n      // The following properties are each individually optional\n      port: 27015,\n      steamID: <Buffer 02 e4 1e 81 af 0c 40 01>,\n      sourceTV: { port: 27020, name: 'SourceTV' },\n      keywords: '_registered,alltalk,east,nocrits,nodmgspread,payload,reddit,replays,rugc',\n      gameID: <Buffer b8 01 00 00 00 00 00 00> }\n\nMost of these values should be self explanatory.\n\nThe **EDF** value is a flag for the optional values. You shouldn't need to look at this flag yourself.\n\n**steamID** and **gameID** are 64 bit values, so they are returned as node.js Buffer objects with 8 bytes. Note that all JavaScript numbers are 64-bit floating point numbers, with only 53 bits of precision, so 64 bit values should not be handled as primitive JavaScript numbers.\n\n### Players list\n\n    ssq.players('1.23.45.67', 1337, function (err, data) {});\n\nReturns an array of players. Sample data:\n\n    [{ index: 0,\n       name: 'Sample Name',\n       score: 2,\n       duration: 267.5876159667969 }, ...]\n\nNote that the **index** attribute seems to always be 0, and the **duration** is in seconds.\n\n### Server rules\n\n    ssq.rules('1.23.45.67', 1337, function (err, data) {});\n\nReturns an array of server rules. Sample data:\n\n    [{ name: 'sv_cheats', value: '1'}, ...]\n\n### Get challenge\n\n    ssq.get_challenge('1.23.45.67', 1337, function (err, data) {});\n\nQueries the server for a challenge number, used by some of the requests. This\nmethod probably won't be needed by anybody, but is provided for completeness\nof the SSQ API.\n\n    <Buffer b8 a4 c3 0f>\n",
  "readmeFilename": "README.md",
  "_id": "ssq@0.0.1",
  "dist": {
    "shasum": "409c8e2087f5ad00ba58e657b515d46aac0c14ce",
    "tarball": "http://registry.npmjs.org/ssq/-/ssq-0.0.1.tgz"
  },
  "_from": "ssq@",
  "_npmVersion": "1.2.2",
  "_npmUser": {
    "name": "gpittarelli",
    "email": "npm@gjp.cc"
  },
  "maintainers": [
    {
      "name": "gpittarelli",
      "email": "npm@gjp.cc"
    }
  ],
  "directories": {},
  "_shasum": "409c8e2087f5ad00ba58e657b515d46aac0c14ce",
  "_resolved": "https://registry.npmjs.org/ssq/-/ssq-0.0.1.tgz"
}
